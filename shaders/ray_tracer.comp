#version 450 core
#pragma debug(on)
#pragma optimize(off)

#pragma storeIntermediate(on)

#define PI                    3.1415926535897932384626422832795028841971
#define TWO_PI				  6.2831853071795864769252867665590057683943
#define SQRT_OF_ONE_THIRD     0.5773502691896257645091487805019574556476
#define EPSILON				  0.000001

layout(local_size_x= 32, local_size_y = 32) in;

layout(rgba32f, binding=0) uniform image2D image;
layout(binding=1) uniform sampler2D checker;
layout(binding=2) uniform samplerBuffer triangles;
layout(binding=3) uniform samplerBuffer normals;
layout(binding=4) uniform samplerBuffer uvs;
layout(binding=7) uniform samplerCube skybox;

uniform int numTriangles;
uniform float near = 0.3;
uniform float far = 1000;
uniform float maxDepth;
uniform bool fetchFromTexture = false;
uniform int numNodes;
uniform bool useLowPoly = false;

#pragma include("hash.glsl")


const vec2 resolution = vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
const vec2 uv = 2 * vec2(gl_GlobalInvocationID.xy)/(resolution - vec2(1)) - vec2(1); // [-1, 1]

const int SPHERE_SHAPE = 0;
const int CYLINDER = 1;
const int BOX = 2;
const int TRIANGLE = 3;
const int PLANE = 4;

struct Plane {
	vec3 n;
	float d;
	int id;
	int matId;
};

struct Box{
	vec3 min;
	vec3 max;
};

struct Sphere{
	vec3 c;
	vec3 color;
	mat4 objectToWorld;
	mat4 worldToObject;
	float r;
	float yMin;
	float yMax;
	float thetaMin;
	float thetaMax;
	float phiMax;
	int id;
	int matId;
};

struct Material {
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float shine;
	float ior;
};

struct Cylinder {
	mat4 objectToWorld;
	mat4 worldToObject;
	float r;
	float yMin;
	float yMax;
	float phiMax;
	int id;
};

struct Triangle {
	int id;	// TODO fix offset issue
	int objectToWorldId;
	int worldToObjectId;
	int matId;
	vec3 a;
	vec3 b;
	vec3 c;
};

struct Shading {
	vec3 n0;
	vec3 n1;
	vec3 n2;
	vec3 t0;
	vec3 t1;
	vec3 t2;
	vec3 bi0;
	vec3 bi1;
	vec3 bi2;
	vec2 uv0;
	vec2 uv1;
	vec2 uv2;
	int id;
};

struct Camera {
	mat4 cameraToWorld;
	mat4 cameraToScreen;
	mat4 rasterToCamera;
	mat4 screenToRaster;
	mat4 rasterToScreen;
	float shutterOpen;
	float shutterClose;
	float lensRadius;
	float focalDistance;
};

struct CameraSample {
	vec2 pFilm;
	vec2 pLens;
	float time;
};

//struct Medium;

struct Ray {
	vec3 o;
	vec3 d;
	float tMax;
	float time;
//	Medium medium;

	// Ray differentials
	bool hasDefferntials;
	vec3 rxo, ryo;
	vec3 rxd, ryd;
	
};

struct SurfaceInteration{
	vec3 n;
	vec3 p;
	vec2 uv;
	vec3 dpdu;
	vec3 dpdv;
	vec4 color;
	int matId;
	int shape;
	int shapeId;
};

struct HitInfo{
	float t;
	int shape;
	int id;
	vec4 extras;
};

struct BVHNode{
  Box box;
  int splitAxis;
  int id;
  int offset;
  int size;
  int isLeaf;
  int child[2];
};

float rng(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}


void swap(inout float a, inout float b){
	float temp = a;
	a = b;
	b = temp;
}

float surfaceArea(Sphere s){
	return s.phiMax * s.r * (s.yMax - s.yMin);
}

Ray spawnRay(vec3 p0, vec3 p1);

Ray createRay(vec3 o, vec3 d, float tMax, float time) {
	Ray ray;
	ray.o = o;
	ray.d = d;
	ray.tMax = tMax;
	ray.time = time;
	return ray;
}

Ray transform(mat4 m, Ray ray){
	Ray r;
	r.o = (m * vec4(ray.o, 1)).xyz;
	r.d = mat3(m) * ray.d;
	r.tMax = ray.tMax;
	return r;
}

void generateRay(in CameraSample csample, in Camera camera, out Ray ray) {
	vec3 p = (camera.rasterToCamera * vec4(csample.pFilm, 0, 1)).xyz;
	ray.o = vec3(0);
	ray.d = normalize(p);
	ray.tMax = far;

	ray.o = (camera.cameraToWorld * vec4(ray.o, 1)).xyz;
	ray.d = mat3(camera.cameraToWorld) * ray.d;
	ray.d = normalize(ray.d);
}

layout(std430, binding=0) buffer CAMERA_SSB0{
	Camera camera;
};

layout(std430, binding=1) buffer SPHERE_SSB0{
	Sphere sphere[1];
};

layout(std430, binding=2) buffer TRIANGLE_SSB0{
	Triangle triangle[];
};

layout(std430, binding=3) buffer SHADING_SSB0{
	Shading shading[];
};

layout(std430, binding=4) buffer BVH_SSBO{
    BVHNode bvh[];
};

layout(std430, binding=5) buffer BVH_TRI_INDEX_SSBO{
    int index[];
};


layout(std430, binding=6) buffer CYLINDER_SSB0{
	Cylinder cylinder[1];
};

layout(std430, binding=7) buffer MATERIAL_SSB0{
	Material material[];
};

layout(std430, binding=8) buffer PLANE_SSB0{
	Plane plane[];
};

layout(std430, binding=9) buffer X_FORMS{
	mat4 xforms[];
};

layout(std430, binding=10) buffer TRIANGLE_LS_SSB0{
	Triangle triangle_ls[];
};

layout(std430, binding=11) buffer BVH_LS_SSBO{
    BVHNode bvh_ls[];
};

layout(std430, binding=12) buffer BVH_TRI_INDEX_LS_SSBO{
    int index_LS[];
};


vec4 trace(Ray ray, int depth);


void main(){
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);


	CameraSample csample;
	csample.pFilm = vec2(pos); // + vec2(rng(vec2(pos.x, 0)), rng(vec2(pos.y, 0)));
	csample.time = hash12(pos);

	Ray ray;
	generateRay(csample, camera, ray);

	imageStore(image, pos, trace(ray, 0));
}

#pragma include("rr_tracer.glsl")