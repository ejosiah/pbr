#version 450 core
#pragma debug(on)
#pragma optimize(off)
#pragma storeIntermediate(on)
#define PI                    3.1415926535897932384626422832795028841971
#define TWO_PI				  6.2831853071795864769252867665590057683943
#define SQRT_OF_ONE_THIRD     0.5773502691896257645091487805019574556476
#define EPSILON				  0.000001
layout(local_size_x= 32, local_size_y = 32) in;
layout(rgba32f, binding=0) uniform image2D image;
layout(binding=1) uniform sampler2D checker;
layout(binding=2) uniform samplerBuffer triangles;
layout(binding=3) uniform samplerBuffer normals;
layout(binding=4) uniform samplerBuffer uvs;
layout(binding=7) uniform samplerCube skybox;
uniform int numTriangles;
uniform float near = 0.3;
uniform float far = 1000;
uniform float maxDepth;
uniform bool fetchFromTexture = false;
uniform int numNodes;
const vec2 resolution = vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
const vec2 uv = 2 * vec2(gl_GlobalInvocationID.xy)/(resolution - vec2(1)) - vec2(1); // [-1, 1]
const int SPHERE_SHAPE = 0;
const int CYLINDER = 1;
const int BOX = 2;
const int TRIANGLE = 3;
const int PLANE = 4;
struct Plane{
	vec3 n;
	float d;
	int id;
};
struct Box{
	vec3 min;
	vec3 max;
};
struct Sphere{
	vec3 c;
	vec3 color;
	mat4 objectToWorld;
	mat4 worldToObject;
	float r;
	float yMin;
	float yMax;
	float thetaMin;
	float thetaMax;
	float phiMax;
	int id;
	int matId;
};
struct Material {
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float shine;
	float ior;
};
struct Cylinder {
	mat4 objectToWorld;
	mat4 worldToObject;
	float r;
	float yMin;
	float yMax;
	float phiMax;
	int id;
};
struct Triangle {
	int id;	// TODO fix offset issue
	int objectToWorldId;
	int worldToObjectId;
	int matId;
	vec3 a;
	vec3 b;
	vec3 c;
};
struct Shading {
	vec3 n0;
	vec3 n1;
	vec3 n2;
	vec3 t0;
	vec3 t1;
	vec3 t2;
	vec3 bi0;
	vec3 bi1;
	vec3 bi2;
	vec2 uv0;
	vec2 uv1;
	vec2 uv2;
	int id;
};
struct Camera {
	mat4 cameraToWorld;
	mat4 cameraToScreen;
	mat4 rasterToCamera;
	mat4 screenToRaster;
	mat4 rasterToScreen;
	float shutterOpen;
	float shutterClose;
	float lensRadius;
	float focalDistance;
};
struct CameraSample {
	vec2 pFilm;
	vec2 pLens;
	float time;
};
//struct Medium;
struct Ray {
	vec3 o;
	vec3 d;
	float tMax;
	float time;
//	Medium medium;
	// Ray differentials
	bool hasDefferntials;
	vec3 rxo, ryo;
	vec3 rxd, ryd;
	
};
struct SurfaceInteration{
	vec3 n;
	vec3 p;
	vec2 uv;
	vec3 dpdu;
	vec3 dpdv;
	vec4 color;
	int matId;
};
struct HitInfo{
	float t;
	int shape;
	int id;
	vec4 extras;
};
struct BVHNode{
  Box box;
  int splitAxis;
  int id;
  int offset;
  int size;
  int isLeaf;
  int child[2];
};
float rng(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}
void swap(inout float a, inout float b){
	float temp = a;
	a = b;
	b = temp;
}
float surfaceArea(Sphere s){
	return s.phiMax * s.r * (s.yMax - s.yMin);
}
Ray spawnRay(vec3 p0, vec3 p1);
Ray createRay(vec3 o, vec3 d, float tMax, float time) {
	Ray ray;
	ray.o = o;
	ray.d = d;
	ray.tMax = tMax;
	ray.time = time;
	return ray;
}
Ray transform(mat4 m, Ray ray){
	Ray r;
	r.o = (m * vec4(ray.o, 1)).xyz;
	r.d = mat3(m) * ray.d;
	r.tMax = ray.tMax;
	return r;
}
void generateRay(in CameraSample csample, in Camera camera, out Ray ray) {
	vec3 p = (camera.rasterToCamera * vec4(csample.pFilm, 0, 1)).xyz;
	ray.o = vec3(0);
	ray.d = normalize(p);
	ray.tMax = far;
	ray.o = (camera.cameraToWorld * vec4(ray.o, 1)).xyz;
	ray.d = mat3(camera.cameraToWorld) * ray.d;
	ray.d = normalize(ray.d);
}
layout(std430, binding=0) buffer CAMERA_SSB0{
	Camera camera;
};
layout(std430, binding=1) buffer SPHERE_SSB0{
	Sphere sphere[1];
};
layout(std430, binding=2) buffer TRIANGLE_SSB0{
	Triangle triangle[];
};
layout(std430, binding=3) buffer SHADING_SSB0{
	Shading shading[];
};
layout(std430, binding=4) buffer BVH_SSBO{
    BVHNode bvh[];
};
layout(std430, binding=5) buffer BVH_TRI_INDEX_SSBO{
    int index[];
};
layout(std430, binding=6) buffer CYLINDER_SSB0{
	Cylinder cylinder[1];
};
layout(std430, binding=7) buffer MATERIAL_SSB0{
	Material material[];
};
vec4 trace(Ray ray, int depth);
void main(){
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	CameraSample csample;
	csample.pFilm = vec2(pos); // + vec2(rng(vec2(pos.x, 0)), rng(vec2(pos.y, 0)));
	csample.time = rng(pos);
	Ray ray;
	generateRay(csample, camera, ray);
	imageStore(image, pos, trace(ray, 0));
}
struct stack {
	int size;
	int top;
	int data[256];
};
bool empty(stack stack) {
	return stack.size == 0;
}
void init(inout stack stack) {
	stack.top = 0;
	stack.size = 0;
}
void push(inout stack stack, int elm) {
	stack.top = stack.size;
	stack.size += 1;
	stack.data[stack.top] = elm;
}
int pop(inout stack stack) {
	if (empty(stack)) return -1;
	int elm = stack.data[stack.top];
	stack.size = stack.top;
	stack.top -= 1;
	return elm;
}
int peek(inout stack stack) {
	if (empty(stack)) return -1;
	return stack.data[stack.top];
}

int left(int node) {
	return 2 * node + 1;
}
int right(int node) {
	return 2 * node + 2;
}
int parent(int node) {
return node == 0 ? -1 : (node - 1) / 2;
}

vec3 sphericalDirection(float sinTheta, float cosTheta, float phi);
bool isQuadratic(float a, float b, float c, out float t0, out float t1);
void fetchShading(int id, out Triangle tri, out Shading s);
bool intersectBVH(Ray ray, out HitInfo hit);
void fetchTriangle(int id, out Triangle tri);
bool intersectSphere(Ray ray, Sphere s, out HitInfo hit);
bool intersectsTriangle(Ray ray, out HitInfo hit);
bool triangleRayIntersect(Ray ray, Triangle tri, out float t, out float u, out float v, out float w);
bool intersectPlane(Ray ray, Plane p, out HitInfo hit);
bool intersectCylinder(Ray ray, Cylinder cylin, out HitInfo hit);
void intialize(HitInfo hit, Ray ray, out SurfaceInteration interact);
vec3 sphericalDirection(float sinTheta, float cosTheta, float phi, mat3 basis);
float sphericalTheta(vec3 v);
float sphericalPhi(vec3 v);
vec4 shade(vec3 p, vec3 n, vec3 l, vec3 pColor, int lightModel);
vec4 shade(SurfaceInteration interact, int depth);
bool hasNoVolume(Box box);
vec2 getUV(Ray ray, HitInfo hit);
vec3 getNormal(Ray ray, HitInfo hit);
vec3 getPosition(Ray ray, HitInfo hit);
float ro(float n);
float fresnel(float n, float cos0);
const int numSpheres = 1;
bool intersectScene(Ray ray, out HitInfo hit) {
	hit.t = ray.tMax;
	HitInfo local_hit;
	local_hit.t = hit.t;
	bool aHit = false;
	for (int i = 0; i < numSpheres; i++) {
		Sphere s = sphere[i];
		if (intersectSphere(ray, s, local_hit)) {
			aHit = true;
			if (local_hit.t < hit.t) {
				hit = local_hit;
			}
		}
	}
	
	local_hit.t = hit.t;
	if (intersectsTriangle(ray, local_hit)) {
		aHit = true;
		if (local_hit.t < hit.t) {
			hit = local_hit;
		}
	}
	//Plane plane;
	//plane.n = vec3(0, 1, 0);
	//plane.d = 0;
	//plane.id = 10;
	//local_hit.t = hit.t;
	//if(intersectPlane(ray, plane, local_hit)){
	//	aHit = true;
	//	if (local_hit.t < hit.t) {
	//		hit = local_hit;
	//	}
	//}
	return aHit;
}
bool intersectCube(Ray ray, Box box, out HitInfo hit) {
	if (hasNoVolume(box)) return false;
	vec3   tMin = (box.min - ray.o) / ray.d;
	vec3   tMax = (box.max - ray.o) / ray.d;
	vec3     t1 = min(tMin, tMax);
	vec3     t2 = max(tMin, tMax);
	float tn = max(max(t1.x, t1.y), t1.z);
	float tf = min(min(t2.x, t2.y), t2.z);
	if (tn > ray.tMax) return false;
	//	if(tn < tf){
	//		if(!testOnly){
	//			interation.p = ray.o + ray.d * tn;
	//			interation.n = -sign(ray.d) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz);
	//		}
	//		return true;
	//	}
	hit.t = tn;
	hit.extras = vec4(t1, tf);
	hit.shape = BOX;
	return tn < tf;
}
const int MAX_DEPTH = 1;
struct Params{
	vec3 color;
	float k;
	int depth;
	SurfaceInteration interact;
	Ray ray;
};
Params params[64];
bool isNull(int node){
	if(node < 0) return true;
	if (params[node].depth < 0 || params[node].depth >= MAX_DEPTH) return true;
	return false;
}
void doIntersect(inout Params pms){
	HitInfo hit;
	if(pms.depth == MAX_DEPTH){
		pms.color = vec3(0);
	}else if (intersectScene(pms.ray, hit)) {
		intialize(hit, pms.ray, pms.interact);
		pms.color = shade(pms.interact, 0).xyz;
	}
	else {
		pms.color = texture(skybox, pms.ray.d).xyz;
	}
}
vec4 trace(Ray ray, int depth) {
	if (depth >= MAX_DEPTH) return vec4(0);
	
	vec4 color = vec4(0);
	params[0].depth = 0;
	params[0].k = 1;
	params[0].ray = ray;
	doIntersect(params[0]);
	stack stack;
	init(stack);
	int root = 0;
	
	do {
		
		while (!isNull(root)) {
			float ior = material[params[root].interact.matId].ior;
			if (ior > 0) {
				SurfaceInteration interact = params[root].interact;
				vec4 l = sphere[0].objectToWorld * vec4(sphere[0].c, 1.0);
				vec3 wi = normalize(l.xyz - interact.p);
				vec3 wo = normalize((camera.cameraToWorld * vec4(0, 0, 0, 1)).xyz);
				vec3 h = normalize(wi + wo);
				float kr = fresnel(ior, dot(l.xyz, h));
				float kt = 1 - kr;
				int right_child = right(root);
				params[right_child].depth = params[root].depth + 1;
				params[right_child].k = kr;
				params[right_child].ray.o = interact.p;
				params[right_child].ray.d = normalize(reflect(params[root].ray.d, interact.n));
				params[right_child].ray.tMax = params[root].ray.tMax;
				doIntersect(params[right_child]);
				int left_child = left(root);
				params[left_child].depth = params[root].depth + 1;
				params[left_child].k = kt;
				params[left_child].ray.o = interact.p;
				params[left_child].ray.d = normalize(refract(params[root].ray.d, interact.n, 1 / ior));
				params[left_child].ray.tMax = params[root].ray.tMax;
				doIntersect(params[left_child]);
			}
			else {
				int right_child = right(root);
				int left_child = left(root);
				params[right_child].depth = -1;
				params[left_child].depth = -1;
			}
	
			if (!isNull(right(root))) {
				push(stack, right(root));
			}
			push(stack, root);
			root = left(root);
		}
		root = pop(stack);
		if (!isNull(right(root)) && peek(stack) == right(root)) {
			pop(stack);
			push(stack, root);
			root = right(root);
		}
		else {
			if(!isNull(right(root))){
				params[root].color += params[right(root)].color * params[right(root)].k;
			}
			if(!isNull(left(root))){
				params[root].color += params[left(root)].color * params[left(root)].k;
			}
			root = -1;
		}
	} while (!empty(stack));
	
	return  vec4(params[0].color, 1);
}
vec4 shade(SurfaceInteration interact, int depth) {
	vec3 p = interact.p;
	vec3 n = interact.n;
	vec3 I = vec3(1);
	vec4 l = sphere[0].objectToWorld * vec4(sphere[0].c, 1.0);
	vec3 wi = normalize( l.xyz - p);
	vec3 wo = normalize( (camera.cameraToWorld * vec4(0, 0, 0, 1)).xyz );
	vec3 h = normalize(wi + wo);
	vec3 ka = vec3(0);
	vec3 kd = interact.color.xyz;
	vec3 ks = I;
	float f = 5.0;
	if(interact.matId >= 0){
		Material mat = material[interact.matId];
		ka = mat.ambient.xyz;
		kd = mat.diffuse.xyz;
		ks = mat.specular.xyz;
		f = mat.shine;
	}
	vec3 Li = ka * vec3(0.3) + I * ka;
	Li += I * max(0, dot(wi, n)) * kd;
	Li += I * max(0, pow(dot(wo, h), f)) * ks;
	return vec4(Li, 1);
}
float ro(float n) {
	return ((n - 1) * (n - 1)) / ((n + 1) * (n + 1));
}
float fresnel(float n, float cos0) {
	float R0 = ro(n);
	return R0 + (1 - R0) * pow((1 - cos0), 5);
}
bool isQuadratic(float a, float b, float c, out float t0, out float t1) {
	float discr = b * b - 4 * a * c;
	if (discr < 0) return false;
	float sqrtDiscr = sqrt(discr);
	t0 = (-b - sqrtDiscr) / (2 * a);
	t1 = (-b + sqrtDiscr) / (2 * a);
	if (t0 > t1) swap(t0, t1);
	return true;
}

bool intersectSphere(Ray ray, Sphere s, out HitInfo hit) {
	float t0 = -1;
	float t1 = t0;
	Ray r = transform(s.worldToObject, ray);
	vec3 m = r.o - s.c;
	float a = dot(r.d, r.d);
	float b = dot(m, ray.d);
	float c = dot(m, m) - s.r * s.r;
	if (c > 0.0f && b > 0.0f) return false;
	float discr = b * b - a * c;
	if (discr < 0.0) return false;
	float sqrtDiscr = sqrt(discr);
	t0 = (-b - sqrtDiscr) / a;
	t1 = (-b + sqrtDiscr) / a;
	if (t0 > t1) swap(t0, t1);
	float tHit = t0;
	if (tHit <= 0) tHit = t1;
	if (tHit > r.tMax) return false;
	vec3 p = r.o + r.d * tHit;
	p *= s.r / distance(p, s.c);
	if (p.x == 0 && p.z == 0) p.x = 1E-5 * s.r;
	float phi = atan(p.z, p.x);
	if (phi < 0) phi += TWO_PI;
	if ((s.yMin > -s.r && p.y < s.yMin) || (s.yMax < s.r && p.y > s.yMax) || phi > s.phiMax) {
		if (tHit == t1) return false;
		if (t1 > ray.tMax) return false;
		tHit = t1;
		p = r.o + r.d * tHit;
		p *= s.r / distance(p, s.c);
		if (p.x == 0 && p.z == 0) p.x = 1E-5 * s.r;
		float phi = atan(p.z, p.x);
		if (phi < 0) phi += TWO_PI;
		if ((s.yMin > -s.r && p.y < s.yMin)
			|| (s.yMax < s.r && p.y > s.yMax)
			|| phi > s.phiMax) return false;
	}
	hit.t = tHit;
	hit.shape = SPHERE_SHAPE;
	hit.id = s.id;
	hit.extras.x = phi;
	return true;
}

bool intersectCylinder(Ray ray, Cylinder cylin, out HitInfo hit) {
	Ray r = transform(cylin.worldToObject, ray);
	vec2 d = r.d.xz;
	vec2 o = r.o.xz;
	float a = dot(d, d);
	float b = 2 * dot(o, d);
	float c = dot(o, o) - cylin.r * cylin.r;
	float t0; float t1;
	if (!isQuadratic(a, b, c, t0, t1)) return false;
	if (t0 > r.tMax || t1 <= 0) return false;
	float tHit = t0;
	if (tHit <= 0) {
		tHit = t1;
		if (tHit > ray.tMax) return false;
	}
	vec3 p = r.o + r.d * tHit;
	float hitRad = length(p.xz);
	p.x *= cylin.r / hitRad;
	p.z *= cylin.r / hitRad;
	float phi = atan(p.z, p.x);
	if (phi < 0) phi += TWO_PI;
	if (p.y < cylin.yMin || p.y > cylin.yMax || phi > cylin.phiMax) {
		if (tHit == t1) return false;
		tHit = t1;
		if (tHit > r.tMax) return false;
		vec3 p = r.o + r.d * tHit;
		float hitRad = length(p.xz);
		p.x *= cylin.r / hitRad;
		p.z *= cylin.r / hitRad;
		float phi = atan(p.z, p.x);
		if (phi < 0) phi += TWO_PI;
		if (p.y < cylin.yMin || p.y > cylin.yMax || phi > cylin.phiMax) return false;
	}
	hit.t = tHit;
	hit.shape = CYLINDER;
	hit.id = cylin.id;
	hit.extras.x = phi;
	return true;
}

bool intersectPlane(Ray ray, Plane p, out HitInfo hit) {
	float t = p.d - dot(p.n, ray.o);
	t /= dot(p.n, ray.d);
	if (t < 0 || t > 10 || t > ray.tMax) {
		return false;
	}
	hit.t = t;
	hit.id = p.id;
	hit.shape = PLANE;
	return true;
}

const int ROOT = 0;
const int LEFT = 0;
const int RIGHT = 1;
const float INFINITY = 1.0 / 0.0;
bool hasNoVolume(Box box) {
	return all(equal(box.min, vec3(0))) && all(equal(box.max, vec3(0)));
}
bool intersectBox(Ray ray, Box box) {
	if (hasNoVolume(box)) return false;
	vec3   tMin = (box.min - ray.o) / ray.d;
	vec3   tMax = (box.max - ray.o) / ray.d;
	vec3     t1 = min(tMin, tMax);
	vec3     t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float  tFar = min(min(t2.x, t2.y), t2.z);
	return  tNear < ray.tMax || tNear < tFar;
}
bool isLeaf(BVHNode node) {
	return node.isLeaf == 1;
}
bool hasChild(BVHNode node, int id) {
	return node.child[id] != -1;
}
BVHNode getNode(int id) {
	if (id >= 0 && id < numNodes) return bvh[id];
	
	BVHNode nullNode;
	nullNode.box.min = nullNode.box.max = vec3(0);
	nullNode.child[LEFT] = nullNode.child[RIGHT] = -1;
	nullNode.isLeaf = 1;
	nullNode.id = -1;
	nullNode.size = nullNode.offset = 0;
	return nullNode;
}
bool intersect(Ray ray, int offset, int size, out HitInfo hit) {
	hit.t = ray.tMax;
	for (int i = 0; i < size; i++) {
		int tid = index[offset + i];
		float t, u, v, w;
		Triangle tri;
		fetchTriangle(tid, tri);
		if (triangleRayIntersect(ray, tri, t, u, v, w)) {
			if (t < hit.t) {
				hit.t = t;
				hit.shape = TRIANGLE;
				hit.id = tid;
				hit.extras = vec4(u, v, w, 0);
			}
		}
	}
	return hit.t != ray.tMax;
}
bool negativeDir(Ray ray, int axis) {
	return (1 / ray.d[axis]) < 0;
}
bool intersectsTriangle(Ray ray, out HitInfo hit) {
	HitInfo lHit;
	bool aHit = false;
	int toVisitOffset = 0, currentNodeIndex = 0;
	int nodesToVisit[64];
	while (!aHit) {
		BVHNode node = getNode(currentNodeIndex);
		if (intersectCube(ray, node.box, lHit)) {
			if (isLeaf(node)) {
				if (intersect(ray, node.offset, node.size, lHit)) aHit = true;
				
				if (toVisitOffset == 0) break;
				currentNodeIndex = nodesToVisit[--toVisitOffset];
			}
			else {
				if (negativeDir(ray, node.splitAxis)) {
					nodesToVisit[toVisitOffset++] = node.child[LEFT];
					currentNodeIndex = node.child[RIGHT];
				}
				else {
					nodesToVisit[toVisitOffset++] = node.child[RIGHT];
					currentNodeIndex = node.child[LEFT];
				}
			}
		}
		else {
			if (toVisitOffset == 0) break;
			currentNodeIndex = nodesToVisit[--toVisitOffset];
		}
	}
	hit = lHit;
	return aHit;
}
void fetchTriangle(int id, out Triangle tri) {
	if (fetchFromTexture) {
		int v0 = id * 3;
		int v1 = id * 3 + 1;
		int v2 = id * 3 + 2;
		tri.a = texelFetch(triangles, v0).xyz;
		tri.b = texelFetch(triangles, v1).xyz;
		tri.c = texelFetch(triangles, v2).xyz;
	}
	else {
		tri = triangle[id];
	}
}
void fetchShading(int id, out Triangle tri, out Shading s) {
	if (fetchFromTexture) {
		int v0 = id * 3;
		int v1 = id * 3 + 1;
		int v2 = id * 3 + 2;
		tri.a = texelFetch(triangles, v0).xyz;
		tri.b = texelFetch(triangles, v1).xyz;
		tri.c = texelFetch(triangles, v2).xyz;
		s.n0 = texelFetch(normals, v0).xyz;
		s.n1 = texelFetch(normals, v1).xyz;
		s.n2 = texelFetch(normals, v2).xyz;
		s.uv0 = texelFetch(uvs, v0).xy;
		s.uv1 = texelFetch(uvs, v1).xy;
		s.uv2 = texelFetch(uvs, v1).xy;
	}
	else {
		tri = triangle[id];
		s = shading[id];
	}
}
bool triangleRayIntersect(Ray ray, Triangle tri, out float t, out float u, out float v, out float w) {
	vec3 ba = tri.b - tri.a;
	vec3 ca = tri.c - tri.a;
	vec3 pa = ray.o - tri.a;
	vec3 pq = -ray.d;
	vec3 n = cross(ba, ca);
	float d = dot(pq, n);
	if (d <= 0) return false; // ray is either coplainar with triangle abc or facing opposite it
	t = dot(pa, n);
	if (t < 0) return false;     // ray invariant t >= 0
	vec3 e = cross(pq, pa);
	v = dot(e, ca);
	if (v < 0.0f || v > d) return false;
	w = -dot(e, ba);
	if (w < 0.0f || (v + w) > d) return false;
	float ood = 1.0 / d;
	t *= ood;
	v *= ood;
	w *= ood;
	u = 1 - v - w;
	return true;
}

void intialize(HitInfo hit, Ray ray, out SurfaceInteration interact) {
	switch (hit.shape) {
	case SPHERE_SHAPE: {
		Sphere s = sphere[hit.id];
		Ray r = transform(s.worldToObject, ray);
		vec3 p = r.o + r.d * hit.t;
		p *= s.r / distance(p, s.c);
		vec3 n = p - s.c;
		float phi = atan(p.z, p.x);
		float u = phi / s.phiMax;
		float theta = acos(clamp(p.y / s.r, -1, 1));
		float v = (theta - s.thetaMin) / (s.thetaMax - s.thetaMin);
		mat4 otw = s.objectToWorld;
		interact.p = (otw * vec4(p, 1)).xyz;
		interact.n = mat3(otw) * n;
		interact.uv = vec2(u, v);
		interact.color = vec4(0, 1, 0, 1);
		interact.matId = s.matId;
		break;
	}
	case CYLINDER: {
		Cylinder c = cylinder[0];
		c.objectToWorld = c.worldToObject = mat4(1);
		c.id = 0;
		c.r = 1;
		c.yMax = 1;
		c.yMin = -1;
		c.phiMax = TWO_PI;
		Ray r = transform(c.worldToObject, ray);
		vec3 p = r.o + r.d * hit.t;
		float hitRad = length(p.xz);
		p.x *= c.r / hitRad;
		p.z *= c.r / hitRad;
		float phi = hit.extras.x;
		float u = phi / c.phiMax;
		float v = (p.y - c.yMin) / (c.yMax - c.yMin);
		vec3 dpdu = vec3(-c.phiMax * p.y, 0, c.phiMax * p.x);
		vec3 dpdv = vec3(0, c.yMax - c.yMin, 0);
		vec3 n = normalize(cross(dpdu, dpdv));
		interact.p = p; //(c.objectToWorld * vec4(p, 1)).xyz;
		interact.n = n;
		interact.uv = vec2(u, v);
		interact.dpdu = dpdu;
		interact.dpdv = dpdv;
		break;
	}
	case TRIANGLE: {
		Triangle tri;
		Shading s;
		fetchShading(hit.id, tri, s);
		float u = hit.extras.x;
		float v = hit.extras.y;
		float w = hit.extras.z;
		vec3 p = ray.o + ray.d * hit.t;
		vec2 uv = s.uv0 * u + s.uv1 * v + s.uv2 * w;
		vec3 n = s.n0 * u + s.n1 * v + s.n2 * w;
		//n = normalize( cross(tri.b - tri.a, tri.c - tri.a));
		interact.p = p;
		interact.n = n;
		interact.uv = uv;
		interact.color = vec4(0.1, 0.1, 0.1, 1);
		interact.matId = tri.matId;
		break;
	}
	case BOX: {
		interact.p = ray.o + ray.d * hit.t;
		break;
	}
	case PLANE: {
		interact.p = ray.o + ray.d * hit.t;
		interact.n = vec3(0, 1, 0);
		interact.color = vec4(0.3, 0.3, 0.3, 1);
		interact.matId = -1;
		break;
	}
	}
}
vec2 getUV(Ray ray, HitInfo hit) {
	switch (hit.shape) {
	case TRIANGLE:
		Triangle tri;
		Shading s;
		fetchShading(hit.id, tri, s);
		float u = hit.extras.x;
		float v = hit.extras.y;
		float w = hit.extras.z;
		return s.uv0 * u + s.uv1 * v + s.uv2 * w;
	default:
		return vec2(0);
	}
}
vec3 getNormal(Ray ray, HitInfo hit) {
	switch (hit.shape) {
	case TRIANGLE:
		Triangle tri;
		Shading s;
		fetchShading(hit.id, tri, s);
		float u = hit.extras.x;
		float v = hit.extras.y;
		float w = hit.extras.z;
		return s.n0 * u + s.n1 * v + s.n2 * w;
	default:
		return vec3(0);
	}
}

/*
vec3 E(vec3 p, vec3 n); // irradiance
vec3 Li(vec3 p, vec3 w, LightSource light);	// incoming radiance
vec3 Lo(vec3 p, vec3 w, LightSource light); // outgoing radiance
*/
vec4 shade(vec3 p, vec3 n, vec3 l, vec3 pColor, int lightModel) {
	vec3 light = vec3(1);
	vec3 gAmb = vec3(0.3);
	vec3 L = l - p;
	vec3 color = gAmb * pColor;
	color += max(0, dot(L, n)) * light * pColor;
	return vec4(color, 1);
}

vec3 sphericalDirection(float sinTheta, float cosTheta, float phi, mat3 basis) {
	vec3 d = vec3(sinTheta * sin(phi), cosTheta, sinTheta * cos(phi));
	return basis * d;
}
float sphericalTheta(vec3 v) {
	return acos(clamp(v.y, -1, 1));
}
float sphericalPhi(vec3 v) {
	float phi = atan(v.x / v.z);
	return phi < 0 ? (phi + TWO_PI) : phi;
}



